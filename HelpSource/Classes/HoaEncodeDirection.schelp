TITLE:: HoaEncodeDirection
summary:: Higher Order Ambisonic (HOA) panner
categories:: Libraries>Ambisonic Toolkit>HOA>Encoding>UGens, UGens>Multichannel>Ambisonics, UGens>Multichannel>Panners
related:: Classes/HoaEncodeMatrix, Classes/HoaDecodeDirection

DESCRIPTION::
Encode a monophonic input to a higher order ambisonic signal (HOA), with near-field effect (NFE).


CLASSMETHODS::

METHOD:: ar


ARGUMENT:: in
The input signal.

ARGUMENT:: theta
Azimuth, in radians.

ARGUMENT:: phi
Elevation, in radians.

ARGUMENT:: radius
Radius, in meters.

ARGUMENT:: order
Ambisonic order.


discussion::

link::Classes/HoaEncodeDirection:: offers HOA encoding equivalent to link::Classes/FoaPanB:: followed by link::Classes/FoaProximity::, in the first order case.

EXAMPLES::

subsection:: Radial encoding

code::
// Inspect the ATK's speed of sound reference
"Speed of sound: % m/s".format(AtkHoa.speedOfSound);

// Inspect the ATK's reference radius
"Reference radius: % m".format(AtkHoa.refRadius);

// Inspect the ATK's channel/coefficient ordering
"Coefficient ordering: %".format(AtkHoa.ordering);

// Inspect the ATK's channel/coefficient ordering
"Coefficient normalisation: %".format(AtkHoa.normalisation);


// simple test...

// boot rt server
s.boot;

// choose Ambisonic order
~order = 1
~order = 2
~order = 3

// choose an outbus, if need be
~outbus = 0

// open scope
s.scope(~order.asHoaOrder.numCoeffs, ~outbus);

// encoding angles
// azimuth & elevation
~theta = 0.0;
~phi = 0.0;

// explicitly set encoding radius
// i.e., radius != AtkHoa.refRadius
~encRadius = 2.0;  // > AtkHoa.refRadius
~encRadius = 1.5;  // = AtkHoa.refRadius
~encRadius = 1.0;  // < AtkHoa.refRadius


// audition
(
{
	// saw params
	var freq = 110.0;
	var gain = -12;

	var sig;

	sig = Saw.ar(freq, gain.dbamp);

	HoaEncodeDirection.ar(sig, ~theta, ~phi, ~encRadius, ~order);

}.play(outbus: ~outbus)
)

// quit rt server
s.quit
::
