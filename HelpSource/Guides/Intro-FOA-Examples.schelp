title:: Introducing the ATK: FOA examples
summary:: First Order Ambisonic (FOA) getting started sound examples
categories:: Libraries>Ambisonic Toolkit>Guides & Tutorials
keyword::Atk

Getting started examples originally found in strong::Introducing the Ambisonic Toolkit::

section:: Examples

The examples below are intended to briefly illustrate playback and imaging of soundfields with the ATK. The user is encouraged to explore the ATK's documentation to gain a deeper understanding of the flexibility of these tools.

As the Ambisonic technique is a hierarchal system, numerous options for playback are possible. These include two channel stereo, two channel binaural, pantophonic and full 3D periphonic. With the examples below, we'll take advantage of this by first choosing a suitable decoder with with to audition.

subsection:: Choose a decoder

A number of decoders are defined below. Please choose one suitable for your system. Also, don't forget to define code:: ~renderDecode :: !

note:: If you choose a kernel decoder, link::Classes/FoaDecoderKernel::, be sure to free the kernel after use. ::

code::
// ------------------------------------------------------------
// boot server
(
		s = Server.default;
		s.boot;
)


// ------------------------------------------------------------
// define convenience function to verify number of server outputs
(
~checkMyServerOutputs = { arg server, decoder;
	server.serverRunning.if({
		(decoder.numOutputs > server.options.numOutputBusChannels).if({
			"Number of Server output bus channels is less than number required by Decoder!".warn;
			"Server Outputs: %\n".postf(server.options.numOutputBusChannels);
			"Decoder Outputs: %\n\n".postf(decoder.numOutputs);
			"Update number of Server outputs as illustrated here: ".post;
			"http://doc.sccode.org/Classes/ServerOptions.html#examples".postln;
		}, {
			"Server has an adequate number of output bus channels for use with this Decoder!".postln;
		})
	})
}
)


// ------------------------------------------------------------
// choose a decoder

// stereophonic / binaural
~decoder = FoaDecoderMatrix.newStereo((131/2).degrad, 0.5) // Cardioids at 131 deg
~decoder = FoaDecoderKernel.newUHJ                         // UHJ (kernel)
~decoder = FoaDecoderKernel.newSpherical                   // synthetic binaural (kernel)
~decoder = FoaDecoderKernel.newCIPIC                       // KEMAR binaural (kernel)


// pantophonic (2D)
~decoder = FoaDecoderMatrix.newQuad(k: 'dual')             // psycho optimised quad
~decoder = FoaDecoderMatrix.newQuad(pi/6, 'dual')          // psycho optimised narrow quad
~decoder = FoaDecoderMatrix.new5_0                         // 5.0
~decoder = FoaDecoderMatrix.newPanto(6, k: 'dual')         // psycho optimised hex


// periphonic (3D)
~decoder = FoaDecoderMatrix.newPeri(k: 'dual')             // psycho optimised cube
~decoder = FoaDecoderMatrix.newDiametric(                  // psycho optimised bi-rectangle
	[[30, 0], [-30, 0], [90, 35.3], [-90, 35.3]].degrad,
	'dual'
)


// inspect
~decoder.kind
~checkMyServerOutputs.value(s, ~decoder)


// ------------------------------------------------------------
// define ~renderDecode
(
~renderDecode = { arg in, decoder;
	var kind;
	var fl, bl, br, fr;
	var fc, lo;
	var sl, sr;
	var flu, blu, bru, fru;
	var fld, bld, brd, frd;
	var slu, sru, sld, srd;


	kind = decoder.kind;

	case
		{ decoder.numChannels == 2 }
			{
				// decode to stereo (or binaural)
				FoaDecode.ar(in, decoder)
			}
		{ kind == 'quad' }
			{
				// decode (to quad)
				#fl, bl, br, fr = FoaDecode.ar(in, decoder);

				// reorder output to match speaker arrangement
				[fl, fr, bl, br]
			}
		{ kind == '5.0' }
			{
				// decode (to 5.0)
				#fc, fl, bl, br, fr = FoaDecode.ar(in, decoder);
				lo = Silent.ar;

				// reorder output to match speaker arrangement
				[fl, fr, fc, lo, bl, br]
			}
		{ kind == 'panto' }
			{
				// decode (to hex)
				#fl, sl, bl, br, sr, fr = FoaDecode.ar(in, decoder);

				// reorder output to match speaker arrangement
				[fl, fr, sl, sr, bl, br]
			}
		{ kind == 'peri' }
			{
				// decode (to cube)
				#flu, blu, bru, fru, fld, bld, brd, frd = FoaDecode.ar(in, decoder);

				// reorder output to match speaker arrangement
				[flu, fru, blu, bru, fld, frd, bld, brd]
			}
		{ kind == 'diametric' }
			{
				// decode (to bi-rectangle)
				#fl, fr, slu, sru, br, bl, srd, sld = FoaDecode.ar(in, decoder);

				// reorder output to match speaker arrangement
				[fl, fr, bl, br, slu, sru, sld, srd]
			};
}
)

// ------------------------------------------------------------
// now we're ready to try the examples below!
// ------------------------------------------------------------
::


subsection:: Produced via the Ambisonic Toolkit

The following three sound examples are excerpts from recordings produced via the ATK.

If you haven't already choosen a code:: ~decoder:: and defined code:: ~renderDecode ::, do so link::#Choose a decoder#now::.


code::
// ------------------------------------------------------------
// B-format examples, produced via the ATK
// B-format soundfile read from disk


// read a whole sound into memory
// remember to free the buffer later!
// (boot the server, if you haven't!)
~sndbuf = Buffer.read(s, Atk.userSoundsDir ++ "/b-format/Anderson-Pacific_Slope.wav")
~sndbuf = Buffer.read(s, Atk.userSoundsDir ++ "/b-format/Howle-Calling_Tunes.wav")
~sndbuf = Buffer.read(s, Atk.userSoundsDir ++ "/b-format/Pampin-On_Space.wav")



(
{
	var sig;                            // audio signal


	// display encoder and decoder
	"Ambisonic decoding via % decoder".format(~decoder.kind).postln;

	// ------------------------------------------------------------
	// test sig
	sig = PlayBuf.ar(~sndbuf.numChannels, ~sndbuf, BufRateScale.kr(~sndbuf), doneAction:2);   // soundfile


	// ------------------------------------------------------------
	// decode (via ~renderDecode)
	~renderDecode.value(sig, ~decoder)

}.scope;
)

// free buffer
~sndbuf.free
// ------------------------------------------------------------
::

note:: strong::Soundfile Credits::

list::
## Joseph Anderson, "Pacific Slope," Epiphanie Sequence, Sargasso SCD28056
## Tim Howle, "Calling Tunes," 20 Odd Years, FMR FMRCD316-0711
## Juan Pampin, "On Space," Les Percussions de Strasbourg 50th Anniversary Edition, Classics Jazz France 480 6512
::

::


subsection:: Natural soundfields, with imaging transforms

This example illustrates the application of various spatial filtering transforms to natural soundfields, recorded via the Soundfield microphone.

The soundfield is controlled by link::Classes/MouseY::, which specifies the transform strong::angle:: argument (90 deg to 0 deg; top to bottom of display). With the mouse at the bottom of the display, the recorded soundfield is unchanged. At the top, the transform is at its most extreme.

If you haven't already choosen a code:: ~decoder:: and defined code:: ~renderDecode ::, do so link::#Choose a decoder#now::.

note:: See link::Classes/FoaTransform:: for further details.::

code::
// ------------------------------------------------------------
// B-format examples, natural soundfield with imaging transform
// B-format soundfile read from disk

// choose transformer
~transformer = 'zoomX'
~transformer = 'pushX'
~transformer = 'directO'



// read a whole sound into memory
// remember to free the buffer later!
// (boot the server, if you haven't!)
~sndbuf = Buffer.read(s, Atk.userSoundsDir ++ "/b-format/Hodges-Purcell.wav")
~sndbuf = Buffer.read(s, Atk.userSoundsDir ++ "/b-format/Leonard-Orfeo_Trio.wav")
~sndbuf = Buffer.read(s, Atk.userSoundsDir ++ "/b-format/Courville-Dialogue.wav")
~sndbuf = Buffer.read(s, Atk.userSoundsDir ++ "/b-format/Leonard-Chinook.wav")
~sndbuf = Buffer.read(s, Atk.userSoundsDir ++ "/b-format/Leonard-Fireworks.wav")
~sndbuf = Buffer.read(s, Atk.userSoundsDir ++ "/b-format/Anderson-Nearfield.wav")


(
{
	var sig;                            // audio signal
	var angle;                          // angle control


	// display transformer & decoder
	"Ambisonic transforming via % transformer".format(~transformer).postln;
	"Ambisonic decoding via % decoder".format(~decoder.kind).postln;

	// gain ---> top            = 90 deg
	//           bottom         = 0 deg
	angle = MouseY.kr(pi/2, 0);


	// ------------------------------------------------------------
	// test sig
	sig = PlayBuf.ar(~sndbuf.numChannels, ~sndbuf, BufRateScale.kr(~sndbuf), doneAction:2);   // soundfile

	// ------------------------------------------------------------
	// transform
	sig = FoaTransform.ar(sig, ~transformer, angle);


	// ------------------------------------------------------------
	// decode (via ~renderDecode)
	~renderDecode.value(sig, ~decoder)

}.scope;
)

// free buffer
~sndbuf.free
// ------------------------------------------------------------
::

note:: strong::Soundfile Credits::

list::
## P. Hodges, "Purcell - Passacaglia (King Arthur)," Sound of Space: ambisonic surround sound. [Online]. Available: http://soundofspace.com/ambisonic_files/52 [Accessed: 03-Nov-2011].
## J. Leonard, "The Orfeo Trio & TetraMic," Sound of Space: ambisonic surround sound. [Online]. Available: http://soundofspace.com/ambisonic_files/41 [Accessed: 03-Nov-2011].
## D. Courville, "Comparative Surround Recording," Ambisonic Studio | Comparative Surround Recording, 2007. [Online]. Available: http://www.radio.uqam.ca/ambisonic/comparative_recording.html [Accessed: 26-Jul-2011].
## J. Leonard, ""A couple of Chinook helicopters," Sound of Space: ambisonic surround sound, 20-Mar-2008. [Online]. Available: http://soundofspace.com/ambisonic_files/47. [Accessed: 03-Nov-2011].
## J. Leonard, “Fireworks,” Sound of Space: ambisonic surround sound, 25-Aug-2009. [Online]. Available: http://soundofspace.com/ambisonic_files/37. [Accessed: 03-Nov-2011].
## Joseph Anderson, "Near-field source," [unpublished recording]
::

::
